import { MapInfoResponse, GeocodingResponse, GeocodingSearchRequest, RoutesRequest, RoutesResponse, SupportedLocationsResponse, SupportedLocationsRequest, TimeMapRequest, TimeMapResponse, TimeFilterRequest, TimeFilterResponse, TimeFilterFastRequest, TimeFilterFastResponse, TimeFilterPostcodesRequest, TimeFilterPostcodesResponse, TimeFilterPostcodeDistrictsRequest, TimeFilterPostcodeDistrictsResponse, TimeFilterPostcodeSectorsRequest, TimeFilterPostcodeSectorsResponse, TimeMapFastRequest, Coords } from '../types';
import { TimeMapFastResponseType, TimeMapResponseType } from '../types/timeMapResponse';
import { RateLimitSettings } from './rateLimiter';
export declare class TravelTimeClient {
    private apiKey;
    private applicationId;
    private axiosInstance;
    private rateLimiter;
    constructor(credentials: {
        apiKey: string;
        applicationId: string;
    }, parameters?: {
        baseURL?: string;
        rateLimitSettings?: Partial<RateLimitSettings>;
    });
    private request;
    geocoding(query: string, req?: GeocodingSearchRequest): Promise<GeocodingResponse>;
    geocodingReverse(coords: Coords, acceptLanguage?: string): Promise<GeocodingResponse>;
    mapInfo: () => Promise<MapInfoResponse>;
    routes: (body: RoutesRequest) => Promise<RoutesResponse>;
    supportedLocations: (body: SupportedLocationsRequest) => Promise<SupportedLocationsResponse>;
    timeFilter: (body: TimeFilterRequest) => Promise<TimeFilterResponse>;
    timeFilterFast: (body: TimeFilterFastRequest) => Promise<TimeFilterFastResponse>;
    timeFilterPostcodeDistricts: (body: TimeFilterPostcodeDistrictsRequest) => Promise<TimeFilterPostcodeDistrictsResponse>;
    timeFilterPostcodeSectors: (body: TimeFilterPostcodeSectorsRequest) => Promise<TimeFilterPostcodeSectorsResponse>;
    timeFilterPostcodes: (body: TimeFilterPostcodesRequest) => Promise<TimeFilterPostcodesResponse>;
    timeMap(body: TimeMapRequest): Promise<TimeMapResponse>;
    timeMap<T extends keyof TimeMapResponseType>(body: TimeMapRequest, format: T): Promise<TimeMapResponseType[T]>;
    timeMapFast(body: TimeMapFastRequest): Promise<TimeMapResponse>;
    timeMapFast<T extends keyof TimeMapFastResponseType>(body: TimeMapFastRequest, format: T): Promise<TimeMapFastResponseType[T]>;
    getBaseURL: () => string | undefined;
    /**
     *
     * @param baseURL Set new base URL. Pass nothing to reset to default
     */
    setBaseURL: (baseURL?: string) => void;
    setRateLimitSettings: (settings: Partial<RateLimitSettings>) => void;
}
