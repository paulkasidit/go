{"ast":null,"code":"var _jsxFileName = \"/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/TripInfoControl.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"./TripInfo/TripInfo.css\";\nimport TripInfo from './TripInfo/TripInfo';\nimport MapControl from \"./MapControl\";\nimport DateInputForm from './TripInfo/DateInputForm';\nimport StarterQuestionnaire from './TripInfo/StarterQuestionnaire';\nimport ReccomendationContainer from \"./TripInfo/ReccomendationContainer\";\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TripInfoControl() {\n  _s();\n  //Sample data to be deleted later\n  let sampleArr = [{\n    country: \"US\",\n    is_capital: false,\n    name: \"Los Angeles\",\n    population: 12750807,\n    latitude: 34.0522,\n    longitude: -118.2437\n  }, {\n    country: \"US\",\n    is_capital: false,\n    name: \"San Francisco\",\n    population: 3592294,\n    latitude: 37.7749,\n    longitude: -122.4194\n  }, {\n    country: \"US\",\n    is_capital: false,\n    name: \"San Bruno\",\n    population: 3592294,\n    latitude: 37.6305,\n    longitude: -122.4111\n  }];\n  let sampleCityDescriptionArray = [{\n    name: \"Los Angeles\",\n    description: \"Los Angeles is a sprawling Southern California city and the center of the nation’s film and television industry. Near its iconic Hollywood sign, studios such as Paramount Pictures, Universal and Warner Brothers offer behind-the-scenes tours. On Hollywood Boulevard, TCL Chinese Theatre displays celebrities’ hand- and footprints, the Walk of Fame honors thousands of luminaries and vendors sell maps to stars’ homes.\"\n  }, {\n    name: \"San Bruno\",\n    description: \"San Bruno is a city in San Mateo County, California, United States, incorporated in 1914. The population was 43,908 at the 2020 United States Census\"\n  }, {\n    name: \"San Francisco\",\n    description: \"San Francisco, officially the City and County of San Francisco, is a commercial, financial, and cultural center of Northern California.\"\n  }];\n  // Hooks for checking if user is authenticated, for the current userProfile,\n  // and checking if the user has a profile(to decide what to render)\n  const {\n    user,\n    isAuthenticated\n  } = useAuth0();\n  const [userProfile, setUserProfile] = useState([]);\n  const [userHasProfile, setUserHasProfile] = useState(false);\n\n  //Hooks for selecting city to visit\n  const [currentAvailableCities, setCurrentAvailableCities] = useState(sampleArr);\n  const [filteredCities, setFilteredCities] = useState([]);\n  const [cityHasBeenSelected, setCityHasBeenSelected] = useState(false);\n  const [cityDescription, setCityDescription] = useState(null);\n  const [selectedCity, setSelectedCity] = useState(\"Los Angeles\");\n\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [destinationLat, setDestinationLat] = useState(null);\n  const [destinationLng, setDestinationLng] = useState(null);\n  const [mapZoom, setMapZoom] = useState(12);\n\n  //Getting user profile\n  useEffect(() => {\n    getUserInformation(user);\n    const filteredCityArray = filterCities(currentAvailableCities, userProfile);\n    console.log(filteredCityArray);\n    setFilteredCities(filteredCityArray);\n  }, [isAuthenticated]);\n\n  //Getting the user's current location \n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  useEffect(() => {\n    getCityDescription();\n  }, [selectedCity]);\n  //Getting nearby cities \n  // useEffect(() => {\n  //   getCityData();\n  // },[lat,lng])\n  //Filtering cities \n  // useEffect(()=>{\n  //   getPlaceData();\n  // },[selectedCity])\n\n  //Function to get user's current location \n  function getCurrentLocation() {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLng(position.coords.longitude);\n    });\n  }\n\n  //Function to check if the user already has a profile and to set the userProfile hook\n  async function getUserInformation(user) {\n    const response = await fetch('http://localhost:5000/record/');\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n    const records = await response.json();\n    Object.entries(records).forEach(entry => {\n      const [key, value] = entry;\n      if (value.username === user.email) {\n        const foundUserProfile = records[key];\n        const currentUserProfile = userProfile.concat(foundUserProfile);\n        setUserProfile(currentUserProfile);\n        setUserHasProfile(true);\n        return foundUserProfile;\n      } else {\n        setUserHasProfile(false);\n      }\n    });\n  }\n  async function getPlaceData() {}\n\n  //Function to get city data within radius\n  async function getCityData() {\n    const headers = {\n      'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n    };\n    const minLat = lat - 3;\n    const maxLat = lat + 3;\n    const minLon = lng - 3;\n    const maxLon = lng + 3;\n    const response = await axios.get('https://api.api-ninjas.com/v1/city?' + \"min_lon=\" + minLon + \"&max_lon=\" + maxLon + \"&min_lat=\" + minLat + \"&max_lat=\" + maxLat + \"&limit=\" + 5, {\n      headers\n    });\n    setCurrentAvailableCities(response.data);\n  }\n\n  //Function to handle the creation of a new User Profile\n  const handleNewUserProfileCreation = newUserProfile => {\n    const currentUserProfile = userProfile.concat(newUserProfile);\n    setUserHasProfile(true);\n  };\n  function getCityDescription() {\n    //Looping to find index of current city in array, and returning the city description at the next index\n    for (let cityDescription of sampleCityDescriptionArray) {\n      for (const [k, v] of Object.entries(cityDescription)) {\n        if (v === selectedCity) {\n          const currentCityDescriptionIndex = sampleCityDescriptionArray.indexOf(cityDescription);\n          console.log(currentCityDescriptionIndex);\n          setCityDescription(sampleCityDescriptionArray[currentCityDescriptionIndex].description);\n        }\n      }\n    }\n  }\n\n  //Function to handle filtering cities \n  function filterCities(thisSessionCurrentAvailableCities, thisSessionUserProfile) {\n    if (thisSessionUserProfile.tripInterests === \"nightlife\") {\n      return thisSessionCurrentAvailableCities.slice(0, 3);\n    } else if (thisSessionUserProfile.tripInterests === \"outdoors\") {\n      return thisSessionCurrentAvailableCities.slice(-1, -4);\n    } else {\n      return thisSessionCurrentAvailableCities;\n    }\n  }\n  const handleSelectClick = e => {\n    e.preventDefault();\n    setCityHasBeenSelected(true);\n  };\n  const handleNextClick = e => {\n    e.preventDefault();\n\n    //Looping to find index of current city in array, and returning the city at the next index \n    for (let cityEntry of currentAvailableCities) {\n      for (const [k, v] of Object.entries(cityEntry)) {\n        if (v === selectedCity) {\n          const currentCityIndex = currentAvailableCities.indexOf(cityEntry);\n          let nextCityIndex = currentAvailableCities[currentCityIndex + 1];\n          if (currentCityIndex === currentAvailableCities.length - 1) nextCityIndex = currentAvailableCities[0];\n          setSelectedCity(nextCityIndex.name);\n          setdes;\n        }\n      }\n    }\n  };\n\n  //Setting the currenly visible state of the page\n  let currentlyVisibleState = null;\n  let currentlyVisibleForm = null;\n  if (isAuthenticated && !userHasProfile) {\n    currentlyVisibleForm = /*#__PURE__*/_jsxDEV(StarterQuestionnaire, {\n      user: user,\n      onNewUserProfileCreation: handleNewUserProfileCreation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }, this);\n    currentlyVisibleState = null;\n  } else if (isAuthenticated && userHasProfile && !cityHasBeenSelected) {\n    currentlyVisibleForm = null;\n    currentlyVisibleState = /*#__PURE__*/_jsxDEV(ReccomendationContainer, {\n      selectedCity: selectedCity,\n      cityDescription: cityDescription,\n      onClickingSelect: handleSelectClick,\n      onClickingNext: handleNextClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 29\n    }, this);\n  } else if (isAuthenticated && userHasProfile && cityHasBeenSelected) {\n    currentlyVisibleForm = /*#__PURE__*/_jsxDEV(DateInputForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 28\n    }, this);\n    currentlyVisibleState = /*#__PURE__*/_jsxDEV(TripInfo, {\n      selectedCity: selectedCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 29\n    }, this);\n  } else {\n    currentlyVisibleForm = null;\n    currentlyVisibleState = null;\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"columns\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"column is-half\",\n        children: /*#__PURE__*/_jsxDEV(MapControl, {\n          tripInfoLat: lat,\n          tripInfoLng: lng,\n          destinationLat: destinationLat,\n          destinationLng: destinationLng,\n          mapZoom: mapZoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"column is-one-quarter\",\n        children: [currentlyVisibleForm, currentlyVisibleState]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(TripInfoControl, \"+Ct406sB2VBD76hFYV/g5bpzSpI=\", false, function () {\n  return [useAuth0];\n});\n_c = TripInfoControl;\n;\nexport default TripInfoControl;\nvar _c;\n$RefreshReg$(_c, \"TripInfoControl\");","map":{"version":3,"names":["React","useState","useEffect","TripInfo","MapControl","DateInputForm","StarterQuestionnaire","ReccomendationContainer","useAuth0","axios","TripInfoControl","sampleArr","country","is_capital","name","population","latitude","longitude","sampleCityDescriptionArray","description","user","isAuthenticated","userProfile","setUserProfile","userHasProfile","setUserHasProfile","currentAvailableCities","setCurrentAvailableCities","filteredCities","setFilteredCities","cityHasBeenSelected","setCityHasBeenSelected","cityDescription","setCityDescription","selectedCity","setSelectedCity","lat","setLat","lng","setLng","destinationLat","setDestinationLat","destinationLng","setDestinationLng","mapZoom","setMapZoom","getUserInformation","filteredCityArray","filterCities","console","log","getCurrentLocation","getCityDescription","navigator","geolocation","getCurrentPosition","position","coords","response","fetch","ok","message","statusText","window","alert","records","json","Object","entries","forEach","entry","key","value","username","email","foundUserProfile","currentUserProfile","concat","getPlaceData","getCityData","headers","process","env","REACT_APP_API_NINJAS_API_KEY","minLat","maxLat","minLon","maxLon","get","data","handleNewUserProfileCreation","newUserProfile","k","v","currentCityDescriptionIndex","indexOf","thisSessionCurrentAvailableCities","thisSessionUserProfile","tripInterests","slice","handleSelectClick","e","preventDefault","handleNextClick","cityEntry","currentCityIndex","nextCityIndex","length","setdes","currentlyVisibleState","currentlyVisibleForm"],"sources":["/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/TripInfoControl.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport \"./TripInfo/TripInfo.css\"; \nimport TripInfo from './TripInfo/TripInfo';\nimport MapControl from \"./MapControl\";\nimport DateInputForm from './TripInfo/DateInputForm';\nimport StarterQuestionnaire from './TripInfo/StarterQuestionnaire';\nimport ReccomendationContainer from \"./TripInfo/ReccomendationContainer\";\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\n\nfunction TripInfoControl (){\n  //Sample data to be deleted later\n  let sampleArr = [{country: \"US\",is_capital:false,name: \"Los Angeles\",population: 12750807,latitude: 34.0522,longitude: -118.2437},\n                   {country: \"US\",is_capital: false,name: \"San Francisco\",population: 3592294,latitude: 37.7749,longitude: -122.4194},\n                   {country: \"US\",is_capital: false,name: \"San Bruno\",population: 3592294, latitude: 37.6305,longitude: -122.4111 }]\n  let sampleCityDescriptionArray  = [{name: \"Los Angeles\", \n                                     description: \"Los Angeles is a sprawling Southern California city and the center of the nation’s film and television industry. Near its iconic Hollywood sign, studios such as Paramount Pictures, Universal and Warner Brothers offer behind-the-scenes tours. On Hollywood Boulevard, TCL Chinese Theatre displays celebrities’ hand- and footprints, the Walk of Fame honors thousands of luminaries and vendors sell maps to stars’ homes.\" },\n                                    {name: \"San Bruno\", \n                                     description: \"San Bruno is a city in San Mateo County, California, United States, incorporated in 1914. The population was 43,908 at the 2020 United States Census\"},\n                                    {name: \"San Francisco\", \n                                     description: \"San Francisco, officially the City and County of San Francisco, is a commercial, financial, and cultural center of Northern California.\"}\n                                    ]\n  // Hooks for checking if user is authenticated, for the current userProfile,\n  // and checking if the user has a profile(to decide what to render)\n  const {user, isAuthenticated} = useAuth0();\n  const [userProfile, setUserProfile] = useState([]);\n  const [userHasProfile, setUserHasProfile] = useState(false);\n\n  //Hooks for selecting city to visit\n  const [currentAvailableCities ,setCurrentAvailableCities] = useState(sampleArr);\n  const [filteredCities, setFilteredCities] = useState([])\n  const [cityHasBeenSelected, setCityHasBeenSelected] = useState(false)\n  const [cityDescription, setCityDescription] = useState(null)\n  const  [selectedCity, setSelectedCity] = useState(\"Los Angeles\")\n\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [destinationLat, setDestinationLat] = useState(null);\n  const [destinationLng, setDestinationLng] = useState(null)\n  const [mapZoom, setMapZoom] = useState(12);\n  \n  //Getting user profile\n  useEffect(()=> {\n    getUserInformation(user)\n    const filteredCityArray = filterCities(currentAvailableCities, userProfile)\n    console.log(filteredCityArray)\n    setFilteredCities(filteredCityArray)\n  },[isAuthenticated])\n\n  //Getting the user's current location \n  useEffect(() => {\n    getCurrentLocation()\n  },[]);\n  useEffect(() => {\n    getCityDescription()\n  },[selectedCity])\n  //Getting nearby cities \n  // useEffect(() => {\n  //   getCityData();\n  // },[lat,lng])\n  //Filtering cities \n  // useEffect(()=>{\n  //   getPlaceData();\n  // },[selectedCity])\n\n  //Function to get user's current location \n  function getCurrentLocation(){\n    navigator.geolocation.getCurrentPosition(function(position){\n      setLat(position.coords.latitude)\n      setLng(position.coords.longitude)\n    })\n  }\n\n  //Function to check if the user already has a profile and to set the userProfile hook\n  async function getUserInformation(user) {\n    const response = await fetch('http://localhost:5000/record/');\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n    const records = await response.json();\n\n    Object.entries(records).forEach((entry) => {\n      const [key, value] = entry;\n      if (value.username === user.email){\n        const foundUserProfile = records[key]\n        const currentUserProfile = userProfile.concat(foundUserProfile);\n        setUserProfile(currentUserProfile);\n        setUserHasProfile(true);\n        return foundUserProfile;\n      } else {\n        setUserHasProfile(false);\n      }\n    });\n  }\n\n  async function getPlaceData(){\n    \n    \n\n  }\n\n\n  //Function to get city data within radius\n  async function getCityData(){\n    const headers = { \n      'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n    }\n    const minLat = lat - 3\n    const maxLat = lat + 3\n    const minLon = lng - 3\n    const maxLon = lng + 3\n    const response = await axios.get('https://api.api-ninjas.com/v1/city?'\n    + \"min_lon=\"\n    + minLon \n    +\"&max_lon=\"\n    + maxLon\n    +\"&min_lat=\"\n    + minLat\n    +\"&max_lat=\"\n    + maxLat\n    +\"&limit=\"\n    + 5, {headers},\n    )\n    setCurrentAvailableCities(response.data)\n  }\n\n  //Function to handle the creation of a new User Profile\n  const handleNewUserProfileCreation = (newUserProfile) => { \n    const currentUserProfile = userProfile.concat(newUserProfile)\n    setUserHasProfile(true);\n  }\n\n  function getCityDescription (){\n      //Looping to find index of current city in array, and returning the city description at the next index\n      for (let cityDescription of sampleCityDescriptionArray){\n        for (const [k,v] of Object.entries(cityDescription)){\n          if (v === selectedCity){\n            const currentCityDescriptionIndex = sampleCityDescriptionArray.indexOf(cityDescription)\n            console.log(currentCityDescriptionIndex)\n            setCityDescription(sampleCityDescriptionArray[currentCityDescriptionIndex].description)\n        }\n      }\n    }\n  }\n\n  //Function to handle filtering cities \n  function filterCities(thisSessionCurrentAvailableCities, thisSessionUserProfile){\n    if (thisSessionUserProfile.tripInterests === \"nightlife\"){\n       return thisSessionCurrentAvailableCities.slice(0,3)\n    } else if (thisSessionUserProfile.tripInterests === \"outdoors\"){\n       return thisSessionCurrentAvailableCities.slice(-1, -4)\n    } else  {\n       return thisSessionCurrentAvailableCities\n    } \n  }\n\n  \n  const handleSelectClick = (e) => {\n    e.preventDefault()\n    setCityHasBeenSelected(true)\n  }\n\n  const handleNextClick = (e) => {\n    e.preventDefault();\n\n    //Looping to find index of current city in array, and returning the city at the next index \n    for (let cityEntry of currentAvailableCities){\n      for (const [k,v] of Object.entries(cityEntry)){\n        if (v === selectedCity){\n          const currentCityIndex = currentAvailableCities.indexOf(cityEntry)\n          let nextCityIndex = currentAvailableCities[currentCityIndex + 1]\n          if(currentCityIndex === currentAvailableCities.length - 1)\n            nextCityIndex = currentAvailableCities[0]\n            setSelectedCity(nextCityIndex.name)\n            setdes\n        } \n      }\n    }\n\n  }\n\n  //Setting the currenly visible state of the page\n  let currentlyVisibleState = null\n  let currentlyVisibleForm = null\n\n  if(isAuthenticated && !userHasProfile){\n    currentlyVisibleForm =  <StarterQuestionnaire\n                              user = {user}\n                              onNewUserProfileCreation = {handleNewUserProfileCreation}/>\n    currentlyVisibleState = null\n  } else if(isAuthenticated && userHasProfile && !cityHasBeenSelected) {\n    currentlyVisibleForm = null\n    currentlyVisibleState = <ReccomendationContainer\n    selectedCity = {selectedCity}\n    cityDescription = {cityDescription}\n    onClickingSelect = {handleSelectClick}\n    onClickingNext = {handleNextClick}/> \n  } else if(isAuthenticated && userHasProfile && cityHasBeenSelected){\n    currentlyVisibleForm = <DateInputForm/>\n    currentlyVisibleState = <TripInfo \n    selectedCity = {selectedCity}\n    />\n  } else {\n    currentlyVisibleForm = null\n    currentlyVisibleState = null\n  }\n  \n  return(\n    <React.Fragment>\n      <div class = \"columns\">\n        <div class = \"column is-half\">\n            <MapControl\n            tripInfoLat = {lat}\n            tripInfoLng = {lng}\n            destinationLat = {destinationLat}\n            destinationLng = {destinationLng} \n            mapZoom = {mapZoom}/>\n          </div>\n        <div class = \"column is-one-quarter\">\n          {currentlyVisibleForm}\n          {currentlyVisibleState}\n        </div>\n      </div>\n    </React.Fragment>\n  )\n  \n};\n\nexport default TripInfoControl;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}