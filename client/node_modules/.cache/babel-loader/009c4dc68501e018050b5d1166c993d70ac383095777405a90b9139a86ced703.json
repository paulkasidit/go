{"ast":null,"code":"var _jsxFileName = \"/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/TripInfoControl.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"./TripInfo/TripInfo.css\";\nimport TripInfo from './TripInfo/TripInfo';\nimport DateInputForm from './TripInfo/DateInputForm';\nimport StarterQuestionnaire from './TripInfo/StarterQuestionnaire';\nimport ReccomendationContainer from \"./TripInfo/ReccomendationContainer\";\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TripInfoControl() {\n  _s();\n  //Sample data to be deleted later\n  let sampleArr = [{\n    country: \"US\",\n    is_capital: false,\n    name: \"Los Angeles\",\n    population: 12750807\n  }, {\n    country: \"US\",\n    is_capital: false,\n    name: \"San Francisco\",\n    population: 3592294\n  }, {\n    country: \"US\",\n    is_capital: false,\n    name: \"San Bruno\",\n    population: 3592294\n  }];\n\n  // Hooks for checking if user is authenticated, for the current userProfile,\n  // and checking if the user has a profile(to decide what to render)\n  const {\n    user,\n    isAuthenticated\n  } = useAuth0();\n  const [userProfile, setUserProfile] = useState([]);\n  const [userHasProfile, setUserHasProfile] = useState(false);\n\n  //Hooks for selecting city to visit\n  const [currentAvailableCities, setCurrentAvailableCities] = useState(sampleArr);\n  const [filteredCities, setFilteredCities] = useState([]);\n  const [cityHasBeenSelected, setCityHasBeenSelected] = useState(false);\n  const [selectedCity, setSelectedCity] = useState(\"Los Angeles\");\n\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n\n  //Getting user profile\n  useEffect(() => {\n    getUserInformation(user);\n    const filteredCityArray = filterCities(currentAvailableCities, userProfile);\n    console.log(filteredCityArray);\n    setFilteredCities(filteredCityArray);\n  }, [isAuthenticated]);\n\n  //Getting the user's current location \n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  //Getting nearby cities \n  // useEffect(() => {\n  //   getCityData();\n  // },[lat,lng])\n  //Filtering cities \n  useEffect(() => {\n    getPlaceData();\n  });\n\n  //Function to get user's current location \n  function getCurrentLocation() {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLng(position.coords.longitude);\n    });\n  }\n\n  //Function to check if the user already has a profile and to set the userProfile hook\n  async function getUserInformation(user) {\n    const response = await fetch('http://localhost:5000/record/');\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n    const records = await response.json();\n    Object.entries(records).forEach(entry => {\n      const [key, value] = entry;\n      if (value.username === user.email) {\n        const foundUserProfile = records[key];\n        const currentUserProfile = userProfile.concat(foundUserProfile);\n        setUserProfile(currentUserProfile);\n        setUserHasProfile(true);\n        return foundUserProfile;\n      } else {\n        setUserHasProfile(false);\n      }\n    });\n  }\n  async function getPlaceData() {\n    // const city = \"LosAngeles\"\n    // const headers = {}\n    // const response = await axios.get(\"https://maps.googleapis.com/maps/api/place/textsearch/json?query=restaurants%20in%20\"\n    // + city\n    // +\"&key=\"\n    // + process.env.REACT_APP_GOOGLE_MAPS_API_KEY,headers)\n\n    // console.log(response.data)\n\n    var config = {\n      method: 'get',\n      url: \"''https://maps.googleapis.com/maps/api/place/textsearch/json?query=\" + process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      headers: {}\n    };\n    await axios(config).then(function (response) {\n      console.log(JSON.stringify(response.data));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  //Function to get city data within radius\n  async function getCityData() {\n    const headers = {\n      'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n    };\n    const minLat = lat - 3;\n    const maxLat = lat + 3;\n    const minLon = lng - 3;\n    const maxLon = lng + 3;\n    const response = await axios.get('https://api.api-ninjas.com/v1/city?' + \"min_lon=\" + minLon + \"&max_lon=\" + maxLon + \"&min_lat=\" + minLat + \"&max_lat=\" + maxLat + \"&limit=\" + 5, {\n      headers\n    });\n    setCurrentAvailableCities(response.data);\n  }\n\n  //Function to handle the creation of a new User Profile\n  const handleNewUserProfileCreation = newUserProfile => {\n    const currentUserProfile = userProfile.concat(newUserProfile);\n    setUserHasProfile(true);\n  };\n\n  //Function to handle filtering cities \n  function filterCities(thisSessionCurrentAvailableCities, thisSessionUserProfile) {\n    if (thisSessionUserProfile.tripInterests === \"nightlife\") {\n      return thisSessionCurrentAvailableCities.slice(0, 3);\n    } else if (thisSessionUserProfile.tripInterests === \"outdoors\") {\n      return thisSessionCurrentAvailableCities.slice(-1, -4);\n    } else {\n      return thisSessionCurrentAvailableCities;\n    }\n  }\n  const handleSelectClick = e => {\n    e.preventDefault();\n    setCityHasBeenSelected(true);\n  };\n  const handleNextClick = e => {\n    e.preventDefault();\n    for (let cityEntry of currentAvailableCities) {\n      for (const [k, v] of Object.entries(cityEntry)) {\n        if (v === selectedCity) {\n          const currentyCityIndex = currentAvailableCities.indexOf(cityEntry);\n          const nextCity = currentAvailableCities[currentyCityIndex + 1];\n          setSelectedCity(nextCity.name);\n        }\n      }\n    }\n  };\n\n  //Setting the currenly visible state of the page\n  let currentlyVisibleState = null;\n  let currentlyVisibleForm = null;\n  if (isAuthenticated && !userHasProfile) {\n    currentlyVisibleForm = /*#__PURE__*/_jsxDEV(StarterQuestionnaire, {\n      user: user,\n      onNewUserProfileCreation: handleNewUserProfileCreation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 29\n    }, this);\n    currentlyVisibleState = null;\n  } else if (isAuthenticated && userHasProfile && !cityHasBeenSelected) {\n    currentlyVisibleForm = null;\n    currentlyVisibleState = /*#__PURE__*/_jsxDEV(ReccomendationContainer, {\n      selectedCity: selectedCity,\n      onClickingSelect: handleSelectClick,\n      onClickingNext: handleNextClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 29\n    }, this);\n  } else if (isAuthenticated && userHasProfile && cityHasBeenSelected) {\n    currentlyVisibleForm = /*#__PURE__*/_jsxDEV(DateInputForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 28\n    }, this);\n    currentlyVisibleState = /*#__PURE__*/_jsxDEV(TripInfo, {\n      selectedCity: selectedCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }, this);\n  } else {\n    currentlyVisibleForm = null;\n    currentlyVisibleState = null;\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [currentlyVisibleForm, currentlyVisibleState]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(TripInfoControl, \"OkyPI68owbeSHs6ZlWKTQN07Klk=\", false, function () {\n  return [useAuth0];\n});\n_c = TripInfoControl;\n;\nexport default TripInfoControl;\nvar _c;\n$RefreshReg$(_c, \"TripInfoControl\");","map":{"version":3,"names":["React","useState","useEffect","TripInfo","DateInputForm","StarterQuestionnaire","ReccomendationContainer","useAuth0","axios","TripInfoControl","sampleArr","country","is_capital","name","population","user","isAuthenticated","userProfile","setUserProfile","userHasProfile","setUserHasProfile","currentAvailableCities","setCurrentAvailableCities","filteredCities","setFilteredCities","cityHasBeenSelected","setCityHasBeenSelected","selectedCity","setSelectedCity","lat","setLat","lng","setLng","getUserInformation","filteredCityArray","filterCities","console","log","getCurrentLocation","getPlaceData","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","response","fetch","ok","message","statusText","window","alert","records","json","Object","entries","forEach","entry","key","value","username","email","foundUserProfile","currentUserProfile","concat","config","method","url","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","headers","then","JSON","stringify","data","catch","error","getCityData","REACT_APP_API_NINJAS_API_KEY","minLat","maxLat","minLon","maxLon","get","handleNewUserProfileCreation","newUserProfile","thisSessionCurrentAvailableCities","thisSessionUserProfile","tripInterests","slice","handleSelectClick","e","preventDefault","handleNextClick","cityEntry","k","v","currentyCityIndex","indexOf","nextCity","currentlyVisibleState","currentlyVisibleForm"],"sources":["/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/TripInfoControl.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport \"./TripInfo/TripInfo.css\"; \nimport TripInfo from './TripInfo/TripInfo';\nimport DateInputForm from './TripInfo/DateInputForm';\nimport StarterQuestionnaire from './TripInfo/StarterQuestionnaire';\nimport ReccomendationContainer from \"./TripInfo/ReccomendationContainer\";\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\n\nfunction TripInfoControl (){\n  //Sample data to be deleted later\n  let sampleArr = [{country: \"US\",is_capital:false,name: \"Los Angeles\",population: 12750807},{country: \"US\",is_capital: false,name: \"San Francisco\",population: 3592294},{country: \"US\",is_capital: false,name: \"San Bruno\",population: 3592294}]\n\n  // Hooks for checking if user is authenticated, for the current userProfile,\n  // and checking if the user has a profile(to decide what to render)\n  const {user, isAuthenticated} = useAuth0();\n  const [userProfile, setUserProfile] = useState([]);\n  const [userHasProfile, setUserHasProfile] = useState(false);\n\n  //Hooks for selecting city to visit\n  const [currentAvailableCities ,setCurrentAvailableCities] = useState(sampleArr);\n  const [filteredCities, setFilteredCities] = useState([])\n  const [cityHasBeenSelected, setCityHasBeenSelected] = useState(false)\n  const  [selectedCity, setSelectedCity] = useState(\"Los Angeles\")\n\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  \n  //Getting user profile\n  useEffect(()=> {\n    getUserInformation(user)\n    const filteredCityArray = filterCities(currentAvailableCities, userProfile)\n    console.log(filteredCityArray)\n    setFilteredCities(filteredCityArray)\n  },[isAuthenticated])\n\n  //Getting the user's current location \n  useEffect(() => {\n    getCurrentLocation()\n  },[]);\n  //Getting nearby cities \n  // useEffect(() => {\n  //   getCityData();\n  // },[lat,lng])\n  //Filtering cities \n  useEffect(()=>{\n    getPlaceData();\n  })\n\n  //Function to get user's current location \n  function getCurrentLocation(){\n    navigator.geolocation.getCurrentPosition(function(position){\n      setLat(position.coords.latitude)\n      setLng(position.coords.longitude)\n    })\n  }\n\n  //Function to check if the user already has a profile and to set the userProfile hook\n  async function getUserInformation(user) {\n    const response = await fetch('http://localhost:5000/record/');\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n    const records = await response.json();\n\n    Object.entries(records).forEach((entry) => {\n      const [key, value] = entry;\n      if (value.username === user.email){\n        const foundUserProfile = records[key]\n        const currentUserProfile = userProfile.concat(foundUserProfile);\n        setUserProfile(currentUserProfile);\n        setUserHasProfile(true);\n        return foundUserProfile;\n      } else {\n        setUserHasProfile(false);\n      }\n    });\n  }\n\n  async function getPlaceData(){\n    \n    // const city = \"LosAngeles\"\n    // const headers = {}\n    // const response = await axios.get(\"https://maps.googleapis.com/maps/api/place/textsearch/json?query=restaurants%20in%20\"\n    // + city\n    // +\"&key=\"\n    // + process.env.REACT_APP_GOOGLE_MAPS_API_KEY,headers)\n\n    // console.log(response.data)\n\n    var config = {\n      method: 'get',\n      url: \"''https://maps.googleapis.com/maps/api/place/textsearch/json?query=\" + process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      headers: { }\n    };\n\n    await axios(config)\n    .then(function (response) {\n      console.log(JSON.stringify(response.data));\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n\n  //Function to get city data within radius\n  async function getCityData(){\n    const headers = { \n      'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n    }\n    const minLat = lat - 3\n    const maxLat = lat + 3\n    const minLon = lng - 3\n    const maxLon = lng + 3\n    const response = await axios.get('https://api.api-ninjas.com/v1/city?'\n    + \"min_lon=\"\n    + minLon \n    +\"&max_lon=\"\n    + maxLon\n    +\"&min_lat=\"\n    + minLat\n    +\"&max_lat=\"\n    + maxLat\n    +\"&limit=\"\n    + 5, {headers},\n    )\n    setCurrentAvailableCities(response.data)\n  }\n\n  //Function to handle the creation of a new User Profile\n  const handleNewUserProfileCreation = (newUserProfile) => { \n    const currentUserProfile = userProfile.concat(newUserProfile)\n    setUserHasProfile(true);\n  }\n\n  //Function to handle filtering cities \n  function filterCities(thisSessionCurrentAvailableCities, thisSessionUserProfile){\n    if (thisSessionUserProfile.tripInterests === \"nightlife\"){\n       return thisSessionCurrentAvailableCities.slice(0,3)\n    } else if (thisSessionUserProfile.tripInterests === \"outdoors\"){\n       return thisSessionCurrentAvailableCities.slice(-1, -4)\n    } else  {\n       return thisSessionCurrentAvailableCities\n    } \n  }\n\n  \n  const handleSelectClick = (e) => {\n    e.preventDefault()\n    setCityHasBeenSelected(true)\n  }\n\n  const handleNextClick = (e) => {\n    e.preventDefault();\n    for (let cityEntry of currentAvailableCities){\n      for (const [k,v] of Object.entries(cityEntry)){\n        if (v === selectedCity){\n          const currentyCityIndex = currentAvailableCities.indexOf(cityEntry)\n          const nextCity = currentAvailableCities[currentyCityIndex + 1]\n          setSelectedCity(nextCity.name)\n        } \n      }\n    }\n  }\n\n\n  //Setting the currenly visible state of the page\n  let currentlyVisibleState = null\n  let currentlyVisibleForm = null\n\n  if(isAuthenticated && !userHasProfile){\n    currentlyVisibleForm =  <StarterQuestionnaire\n                              user = {user}\n                              onNewUserProfileCreation = {handleNewUserProfileCreation}/>\n    currentlyVisibleState = null\n  } else if(isAuthenticated && userHasProfile && !cityHasBeenSelected) {\n    currentlyVisibleForm = null\n    currentlyVisibleState = <ReccomendationContainer\n    selectedCity = {selectedCity}\n    onClickingSelect = {handleSelectClick}\n    onClickingNext = {handleNextClick}/> \n  } else if(isAuthenticated && userHasProfile && cityHasBeenSelected){\n    currentlyVisibleForm = <DateInputForm/>\n    currentlyVisibleState = <TripInfo \n    selectedCity = {selectedCity}\n    />\n  } else {\n    currentlyVisibleForm = null\n    currentlyVisibleState = null\n  }\n  \n  return(\n    <React.Fragment>\n      {currentlyVisibleForm}\n      {currentlyVisibleState}\n    </React.Fragment>\n  )\n  \n};\n\nexport default TripInfoControl;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}