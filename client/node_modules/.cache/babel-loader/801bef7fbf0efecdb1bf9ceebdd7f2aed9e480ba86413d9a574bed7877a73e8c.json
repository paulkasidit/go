{"ast":null,"code":"var _jsxFileName = \"/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/MainControl.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"./Main/Main.css\";\nimport AirbnbAPI from './Main/AirbnbAPI';\nimport GoogleMapsAPI from './Main/GoogleMapsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainControl() {\n  _s();\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n\n  //Default location that will be rendered on page loading. \n  const userCurrentLocation = {\n    center: {\n      lat: lat,\n      lng: lng\n    },\n    zoom: 12\n  };\n\n  //Function to get list of cities in radius\n  function getListOfCitiesInRadius() {\n    const xhr = new XMLHttpRequest();\n    const name = 'Paso Robles';\n    xhr.get({\n      url: 'https://api.api-ninjas.com/v1/city?name=' + name,\n      headers: {\n        'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n      }\n    }, function (error, response, body) {\n      if (error) return console.error('Request failed:', error);else if (response.statusCode != 200) return console.error('Error:', response.statusCode, body.toString('utf8'));else console.log(body);\n    });\n    xhr.open('GET', '');\n  }\n  getListOfCitiesInRadius();\n\n  //Getting the user's current location \n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(position.coords.latitude);\n      console.log(position.coords.longitude);\n      setLat(position.coords.latitude);\n      setLng(position.coords.longitude);\n    });\n  });\n  const markers = [{\n    id: 1,\n    lat: userCurrentLocation.center.lat,\n    lng: userCurrentLocation.center.lng,\n    text: \"HOME\"\n  }, {\n    id: 2,\n    lat: 39.5299,\n    lng: -119.8143,\n    text: \"DESTINATION\"\n  }];\n  let currentlyVisibleState = /*#__PURE__*/_jsxDEV(GoogleMapsAPI, {\n    userCurrentLocation: userCurrentLocation,\n    pinsList: markers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 32\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: currentlyVisibleState\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n}\n_s(MainControl, \"xt7ae38ibc/e0a/2PPAC15ZSSyM=\");\n_c = MainControl;\n;\nexport default MainControl;\nvar _c;\n$RefreshReg$(_c, \"MainControl\");","map":{"version":3,"names":["React","useState","useEffect","AirbnbAPI","GoogleMapsAPI","MainControl","lat","setLat","lng","setLng","userCurrentLocation","center","zoom","getListOfCitiesInRadius","xhr","XMLHttpRequest","name","get","url","headers","process","env","REACT_APP_API_NINJAS_API_KEY","error","response","body","console","statusCode","toString","log","open","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","markers","id","text","currentlyVisibleState"],"sources":["/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/MainControl.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport \"./Main/Main.css\"\nimport AirbnbAPI from './Main/AirbnbAPI';\nimport GoogleMapsAPI from './Main/GoogleMapsAPI';\n\nfunction MainControl (){\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n\n  //Default location that will be rendered on page loading. \n  const userCurrentLocation = {\n    center: {lat: lat, lng: lng}, \n    zoom: 12\n  }\n  \n  //Function to get list of cities in radius\n  function getListOfCitiesInRadius(){\n    const xhr = new XMLHttpRequest();\n\n    const name = 'Paso Robles'\n    xhr.get({\n      url: 'https://api.api-ninjas.com/v1/city?name=' + name,\n      headers: {\n        'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n      },\n    }, function(error, response, body) {\n      if(error) return console.error('Request failed:', error);\n      else if(response.statusCode != 200) return console.error('Error:', response.statusCode, body.toString('utf8'));\n      else console.log(body)\n    });\n\n    xhr.open('GET', '')\n  }\n\n  getListOfCitiesInRadius();\n\n  //Getting the user's current location \n  useEffect(() => {\n      navigator.geolocation.getCurrentPosition(function(position){\n      console.log(position.coords.latitude)\n      console.log(position.coords.longitude)\n      setLat(position.coords.latitude)\n      setLng(position.coords.longitude)\n    });\n  })\n\n  const markers = [ \n    {\n      id:1, \n      lat: userCurrentLocation.center.lat,\n      lng: userCurrentLocation.center.lng,\n      text: \"HOME\"\n    },\n    {\n      id:2, \n      lat: 39.5299, \n      lng: -119.8143, \n      text: \"DESTINATION\"\n    }\n  ]\n\n  let currentlyVisibleState =  <GoogleMapsAPI \n                                userCurrentLocation = {userCurrentLocation}\n                                pinsList = {markers}\n                                />\n\n    return(\n      <React.Fragment>\n        {currentlyVisibleState}\n      </React.Fragment>\n    ) \n};\n\nexport default MainControl;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,OAAO,WAAW;AAClB,OAAO,iBAAiB;AACxB,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,aAAa,MAAM,sBAAsB;AAAC;AAEjD,SAASC,WAAW,GAAG;EAAA;EACrB;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACO,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAEpC;EACA,MAAMS,mBAAmB,GAAG;IAC1BC,MAAM,EAAE;MAACL,GAAG,EAAEA,GAAG;MAAEE,GAAG,EAAEA;IAAG,CAAC;IAC5BI,IAAI,EAAE;EACR,CAAC;;EAED;EACA,SAASC,uBAAuB,GAAE;IAChC,MAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE;IAEhC,MAAMC,IAAI,GAAG,aAAa;IAC1BF,GAAG,CAACG,GAAG,CAAC;MACNC,GAAG,EAAE,0CAA0C,GAAGF,IAAI;MACtDG,OAAO,EAAE;QACP,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC;MAC3B;IACF,CAAC,EAAE,UAASC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE;MACjC,IAAGF,KAAK,EAAE,OAAOG,OAAO,CAACH,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC,CAAC,KACpD,IAAGC,QAAQ,CAACG,UAAU,IAAI,GAAG,EAAE,OAAOD,OAAO,CAACH,KAAK,CAAC,QAAQ,EAAEC,QAAQ,CAACG,UAAU,EAAEF,IAAI,CAACG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAC1GF,OAAO,CAACG,GAAG,CAACJ,IAAI,CAAC;IACxB,CAAC,CAAC;IAEFX,GAAG,CAACgB,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC;EACrB;EAEAjB,uBAAuB,EAAE;;EAEzB;EACAX,SAAS,CAAC,MAAM;IACZ6B,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,UAASC,QAAQ,EAAC;MAC3DR,OAAO,CAACG,GAAG,CAACK,QAAQ,CAACC,MAAM,CAACC,QAAQ,CAAC;MACrCV,OAAO,CAACG,GAAG,CAACK,QAAQ,CAACC,MAAM,CAACE,SAAS,CAAC;MACtC9B,MAAM,CAAC2B,QAAQ,CAACC,MAAM,CAACC,QAAQ,CAAC;MAChC3B,MAAM,CAACyB,QAAQ,CAACC,MAAM,CAACE,SAAS,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMC,OAAO,GAAG,CACd;IACEC,EAAE,EAAC,CAAC;IACJjC,GAAG,EAAEI,mBAAmB,CAACC,MAAM,CAACL,GAAG;IACnCE,GAAG,EAAEE,mBAAmB,CAACC,MAAM,CAACH,GAAG;IACnCgC,IAAI,EAAE;EACR,CAAC,EACD;IACED,EAAE,EAAC,CAAC;IACJjC,GAAG,EAAE,OAAO;IACZE,GAAG,EAAE,CAAC,QAAQ;IACdgC,IAAI,EAAE;EACR,CAAC,CACF;EAED,IAAIC,qBAAqB,gBAAI,QAAC,aAAa;IACb,mBAAmB,EAAI/B,mBAAoB;IAC3C,QAAQ,EAAI4B;EAAQ;IAAA;IAAA;IAAA;EAAA,QAClB;EAE9B,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,UACZG;EAAqB;IAAA;IAAA;IAAA;EAAA,QACP;AAEvB;AAAC,GAnEQpC,WAAW;AAAA,KAAXA,WAAW;AAmEnB;AAED,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}