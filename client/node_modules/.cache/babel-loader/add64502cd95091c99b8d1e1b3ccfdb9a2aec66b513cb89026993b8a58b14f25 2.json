{"ast":null,"code":"var _jsxFileName = \"/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/TripInfoControl.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"./TripInfo/TripInfo.css\";\nimport TripInfo from './TripInfo/TripInfo';\nimport DateInputForm from './TripInfo/DateInputForm';\nimport StarterQuestionnaire from './TripInfo/StarterQuestionnaire';\nimport ReccomendationContainer from \"./TripInfo/ReccomendationContainer\";\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TripInfoControl() {\n  _s();\n  // Hooks for checking if user is authenticated, for the current userProfile,\n  // and checking if the user has a profile(to decide what to render)\n  const {\n    user,\n    isAuthenticated\n  } = useAuth0();\n  const [userProfile, setUserProfile] = useState([]);\n  const [userHasProfile, setUserHasProfile] = useState(false);\n\n  //Hooks for selecting city to visit\n  const [currentAvailableCities, setCurrentAvailableCities] = useState([]);\n  const [filteredCities, setFilteredCities] = useState([]);\n  const [showNextCity, setShowNextCity] = useState([]);\n  const [cityHasBeenSelected, setCityHasBeenSelected] = useState(false);\n  const [selectedCity, setSelectedCity] = useState(null);\n\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n\n  //Getting user profile\n  useEffect(() => {\n    getUserInformation(user);\n  }, [user]);\n\n  //Getting the user's current location \n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n  //Getting nearby cities \n  useEffect(() => {\n    getCityData();\n  }, [lat, lng]);\n  //Filtering cities \n  console.log(currentAvailableCities);\n\n  //Function to get user's current location \n  function getCurrentLocation() {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLng(position.coords.longitude);\n    });\n  }\n\n  //Function to check if the user already has a profile and to set the userProfile hook\n  async function getUserInformation(user) {\n    const response = await fetch('http://localhost:5000/record/');\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n    const records = await response.json();\n    Object.entries(records).forEach(entry => {\n      const [key, value] = entry;\n      if (value.username === user.email) {\n        const foundUserProfile = records[key];\n        const currentUserProfile = userProfile.concat(foundUserProfile);\n        setUserProfile(currentUserProfile);\n        setUserHasProfile(true);\n        return foundUserProfile;\n      } else {\n        setUserHasProfile(false);\n      }\n    });\n  }\n\n  //Function to get city data within radius\n  async function getCityData() {\n    const headers = {\n      'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n    };\n    const minLat = lat - 3;\n    const maxLat = lat + 3;\n    const minLon = lng - 3;\n    const maxLon = lng + 3;\n    const response = await axios.get('https://api.api-ninjas.com/v1/city?' + \"min_lon=\" + minLon + \"&max_lon=\" + maxLon + \"&min_lat=\" + minLat + \"&max_lat=\" + maxLat + \"&limit=\" + 5, {\n      headers\n    });\n    setCurrentAvailableCities(response.data);\n  }\n\n  //Function to handle the creation of a new User Profile\n  const handleNewUserProfileCreation = newUserProfile => {\n    const currentUserProfile = userProfile.concat(newUserProfile);\n    setUserHasProfile(true);\n  };\n\n  //Function to handle filtering cities \n  function filterCities(thisSessionCurrentAvailableCities, thisSessionUserProfile) {\n    let result = [];\n    if (thisSessionUserProfile.tripInterests === \"nightlife\") {\n      result.push(currentAvailableCities.slice(0, 2));\n    } else if (thisSessionUserProfile.tripInterests === \"outdoors\") {\n      result.push(currentAvailableCities.slice(-1, -3));\n    } else {\n      result.push(currentAvailableCities.slice(0, 3));\n    }\n    return result;\n  }\n  console.log(filteredCities);\n  //Setting the currenly visible state of the page\n  let currentlyVisibleState = null;\n  let currentlyVisibleForm = null;\n  if (isAuthenticated && !userHasProfile) {\n    currentlyVisibleForm = /*#__PURE__*/_jsxDEV(StarterQuestionnaire, {\n      user: user,\n      onNewUserProfileCreation: handleNewUserProfileCreation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }, this);\n    currentlyVisibleState = null;\n  } else if (isAuthenticated && userHasProfile) {\n    currentlyVisibleForm = /*#__PURE__*/_jsxDEV(DateInputForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 28\n    }, this);\n    currentlyVisibleState = /*#__PURE__*/_jsxDEV(ReccomendationContainer, {\n      filteredCities: currentAvailableCities.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 29\n    }, this);\n  } else {\n    currentlyVisibleForm = null;\n    currentlyVisibleState = null;\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [currentlyVisibleForm, currentlyVisibleState]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(TripInfoControl, \"aLZdHJVfjchSAe3aYUngIRcDHn0=\", false, function () {\n  return [useAuth0];\n});\n_c = TripInfoControl;\n;\nexport default TripInfoControl;\nvar _c;\n$RefreshReg$(_c, \"TripInfoControl\");","map":{"version":3,"names":["React","useState","useEffect","TripInfo","DateInputForm","StarterQuestionnaire","ReccomendationContainer","useAuth0","axios","TripInfoControl","user","isAuthenticated","userProfile","setUserProfile","userHasProfile","setUserHasProfile","currentAvailableCities","setCurrentAvailableCities","filteredCities","setFilteredCities","showNextCity","setShowNextCity","cityHasBeenSelected","setCityHasBeenSelected","selectedCity","setSelectedCity","lat","setLat","lng","setLng","getUserInformation","getCurrentLocation","getCityData","console","log","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","response","fetch","ok","message","statusText","window","alert","records","json","Object","entries","forEach","entry","key","value","username","email","foundUserProfile","currentUserProfile","concat","headers","process","env","REACT_APP_API_NINJAS_API_KEY","minLat","maxLat","minLon","maxLon","get","data","handleNewUserProfileCreation","newUserProfile","filterCities","thisSessionCurrentAvailableCities","thisSessionUserProfile","result","tripInterests","push","slice","currentlyVisibleState","currentlyVisibleForm","name"],"sources":["/Users/paulkasidit/Desktop/Epicodus/go/client/src/components/TripInfoControl.js"],"sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport \"./TripInfo/TripInfo.css\"; \nimport TripInfo from './TripInfo/TripInfo';\nimport DateInputForm from './TripInfo/DateInputForm';\nimport StarterQuestionnaire from './TripInfo/StarterQuestionnaire';\nimport ReccomendationContainer from \"./TripInfo/ReccomendationContainer\";\nimport { useAuth0 } from '@auth0/auth0-react';\nimport axios from 'axios';\n\nfunction TripInfoControl (){\n  // Hooks for checking if user is authenticated, for the current userProfile,\n  // and checking if the user has a profile(to decide what to render)\n  const {user, isAuthenticated} = useAuth0();\n  const [userProfile, setUserProfile] = useState([]);\n  const [userHasProfile, setUserHasProfile] = useState(false);\n\n  //Hooks for selecting city to visit\n  const [currentAvailableCities ,setCurrentAvailableCities] = useState([]);\n  const [filteredCities, setFilteredCities] = useState([])\n  const [showNextCity, setShowNextCity] = useState([])\n  const [cityHasBeenSelected, setCityHasBeenSelected] = useState(false)\n  const  [selectedCity, setSelectedCity] = useState(null)\n\n  //Hooks to set the current location for user\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n\n  //Getting user profile\n  useEffect(()=> {\n    getUserInformation(user)\n  },[user])\n\n  //Getting the user's current location \n  useEffect(() => {\n    getCurrentLocation()\n  },[]);\n  //Getting nearby cities \n  useEffect(() => {\n    getCityData();\n  },[lat,lng])\n  //Filtering cities \n  console.log(currentAvailableCities)\n\n  //Function to get user's current location \n  function getCurrentLocation(){\n    navigator.geolocation.getCurrentPosition(function(position){\n      setLat(position.coords.latitude)\n      setLng(position.coords.longitude)\n    })\n  }\n\n  //Function to check if the user already has a profile and to set the userProfile hook\n  async function getUserInformation(user) {\n    const response = await fetch('http://localhost:5000/record/');\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n    const records = await response.json();\n\n    Object.entries(records).forEach((entry) => {\n      const [key, value] = entry;\n      if (value.username === user.email){\n        const foundUserProfile = records[key]\n        const currentUserProfile = userProfile.concat(foundUserProfile);\n        setUserProfile(currentUserProfile);\n        setUserHasProfile(true);\n        return foundUserProfile;\n      } else {\n        setUserHasProfile(false);\n      }\n    });\n  }\n\n  //Function to get city data within radius\n  async function getCityData(){\n    const headers = { \n      'X-Api-Key': process.env.REACT_APP_API_NINJAS_API_KEY\n    }\n    const minLat = lat - 3\n    const maxLat = lat + 3\n    const minLon = lng - 3\n    const maxLon = lng + 3\n    const response = await axios.get('https://api.api-ninjas.com/v1/city?'\n    + \"min_lon=\"\n    + minLon \n    +\"&max_lon=\"\n    + maxLon\n    +\"&min_lat=\"\n    + minLat\n    +\"&max_lat=\"\n    + maxLat\n    +\"&limit=\"\n    + 5, {headers},\n    )\n    setCurrentAvailableCities(response.data)\n  }\n\n  //Function to handle the creation of a new User Profile\n  const handleNewUserProfileCreation = (newUserProfile) => { \n    const currentUserProfile = userProfile.concat(newUserProfile)\n    setUserHasProfile(true);\n  }\n\n  //Function to handle filtering cities \n  function filterCities(thisSessionCurrentAvailableCities, thisSessionUserProfile){\n    let result = []\n    if (thisSessionUserProfile.tripInterests === \"nightlife\"){\n       result.push(currentAvailableCities.slice(0,2))\n    } else if (thisSessionUserProfile.tripInterests === \"outdoors\"){\n       result.push(currentAvailableCities.slice(-1, -3))\n    } else  {\n       result.push(currentAvailableCities.slice(0,3))\n    } \n    return result;\n  }\n\n  console.log(filteredCities)\n  //Setting the currenly visible state of the page\n  let currentlyVisibleState = null;\n  let currentlyVisibleForm = null;\n\n  if(isAuthenticated && !userHasProfile){\n    currentlyVisibleForm =  <StarterQuestionnaire\n                              user = {user}\n                              onNewUserProfileCreation = {handleNewUserProfileCreation}/>\n    currentlyVisibleState = null\n  } else if(isAuthenticated && userHasProfile) {\n    currentlyVisibleForm = <DateInputForm/>\n    currentlyVisibleState = <ReccomendationContainer\n    filteredCities={currentAvailableCities.name} /> \n  } else {\n    currentlyVisibleForm = null\n    currentlyVisibleState = null\n  }\n  \n  return(\n    <React.Fragment>\n      {currentlyVisibleForm}\n      {currentlyVisibleState}\n    </React.Fragment>\n  )\n  \n};\n\nexport default TripInfoControl;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}